# GitHub Actions에서 수행할 작업 정의
on:
  pull_request:
    branches:
      - main
      - release  # PR을 main 또는 release 브랜치로 할 때만 CI가 실행되도록 설정

  push:
    branches:
      - main
      - release  # main 혹은 release 브랜치에 푸시될 때만 배포가 실행되도록 설정

jobs:
  build:
    runs-on: ubuntu-latest  # 빌드 환경 설정 (우분투 사용)

    steps:
      # 1. 저장소 클론
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Java 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      # 3. secrets 내용을 읽어 yml 파일 생성
      - name: Create application.yml and decrypt keystore.p12
        run: |
          # application.yml 파일에서 시크릿 값 바꾸기
          sed -i "s|\${DOMAIN}|${{ secrets.DOMAIN }}|g" ./src/main/resources/application.yml
          sed -i "s|\${REDIRECT_URL}|${{ secrets.REDIRECT_URL }}|g" ./src/main/resources/application.yml
          sed -i "s|\${KEY_STORE}|${{ secrets.KEY_STORE }}|g" ./src/main/resources/application.yml
          sed -i "s|\${KEY_STORE_TYPE}|${{ secrets.KEY_STORE_TYPE }}|g" ./src/main/resources/application.yml
          sed -i "s|\${KEY_STORE_PASS}|${{ secrets.KEY_STORE_PASS }}|g" ./src/main/resources/application.yml
          sed -i "s|\${DB_USERNAME}|${{ secrets.DB_USERNAME }}|g" ./src/main/resources/application.yml
          sed -i "s|\${DB_PASSWORD}|${{ secrets.DB_PASSWORD }}|g" ./src/main/resources/application.yml
          sed -i "s|\${JWT_SECRET}|${{ secrets.JWT_SECRET }}|g" ./src/main/resources/application.yml
          
          # Google, Kakao, Naver 관련 client 정보 설정
          sed -i "s|\${GOOGLE_CLIENT_ID}|${{ secrets.GOOGLE_CLIENT_ID }}|g" ./src/main/resources/application.yml
          sed -i "s|\${GOOGLE_CLIENT_SECRET}|${{ secrets.GOOGLE_CLIENT_SECRET }}|g" ./src/main/resources/application.yml
          sed -i "s|\${KAKAO_CLIENT_ID}|${{ secrets.KAKAO_CLIENT_ID }}|g" ./src/main/resources/application.yml
          sed -i "s|\${KAKAO_CLIENT_SECRET}|${{ secrets.KAKAO_CLIENT_SECRET }}|g" ./src/main/resources/application.yml
          sed -i "s|\${NAVER_CLIENT_ID}|${{ secrets.NAVER_CLIENT_ID }}|g" ./src/main/resources/application.yml
          sed -i "s|\${NAVER_CLIENT_SECRET}|${{ secrets.NAVER_CLIENT_SECRET }}|g" ./src/main/resources/application.yml
          
          # keystore 파일 생성
          # 파일 경로 확인
          echo "파일 생성 경로 : /home/${{ secrets.EC2_USER }}/docker/src/main/resources/keystore.p12"
          # Base64 디코딩하여 keystore.p12 생성
          echo "${{ secrets.KEY_STORE_BASE64 }}" | base64 --decode > /home/${{ secrets.EC2_USER }}/docker/src/main/resources/keystore.p12
          # 결과 확인
          ls -al /home/${{ secrets.EC2_USER }}/docker/src/main/resources/


      # 4. Gradle 빌드 (테스트 제외)
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # 5. Docker 이미지 빌드 및 Docker Hub에 푸시
      - name: Build and Push Docker Image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-spring-app .
          docker push ${{ secrets.DOCKER_USERNAME }}/my-spring-app

  deploy:
    runs-on: ubuntu-latest  # 배포 환경 설정 (우분투 사용)
    needs: build  # 빌드 작업이 완료된 후 배포 작업 실행
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release'  # main 또는 release 브랜치에서만 배포 실행

    steps:
      # EC2 서버에 Docker Compose로 배포
      - name: Deploy on EC2 with Docker Compose
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}  # EC2 호스트 주소
          EC2_USER: ${{ secrets.EC2_USER }}  # EC2 사용자명
          EC2_KEY: ${{ secrets.EC2_KEY }}  # EC2 키 파일
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub 사용자명
        run: |
          # EC2 서버 키 설정 및 권한 설정
          echo "${EC2_KEY}" > ec2-key.pem
          chmod 600 ec2-key.pem
          mkdir -p ~/.ssh
          ssh-keyscan -H ${EC2_HOST} >> ~/.ssh/known_hosts

          # EC2 서버에서 작업 실행
          ssh -i ec2-key.pem -t ${EC2_USER}@${EC2_HOST} << EOF
            # Git 리포지토리 경로로 이동
            cd /home/${EC2_USER}/docker

            # 최신 코드 가져오기 (main 또는 release 브랜치)
            git fetch origin
            if [ "$GITHUB_REF" == "refs/heads/main" ]; then
              git checkout main
              git pull origin main
            elif [ "$GITHUB_REF" == "refs/heads/release" ]; then
              git checkout release
              git pull origin release
            fi

            # Docker 로그인
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

            # 기존 컨테이너 강제 종료 및 삭제
            docker rm -f spring_app || true

            # 새 컨테이너 실행
            docker-compose down
            docker-compose up -d --force-recreate
          EOF

          # EC2 서버 키 삭제
          rm -f ec2-key.pem